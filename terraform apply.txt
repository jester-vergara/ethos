jvergara@DESKTOP-6TT1CHF:~/ethos$ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_elb.Ethos-project will be created
  + resource "aws_elb" "Ethos-project" {
      + arn                         = (known after apply)
      + availability_zones          = (known after apply)
      + connection_draining         = false
      + connection_draining_timeout = 300
      + cross_zone_load_balancing   = true
      + dns_name                    = (known after apply)
      + id                          = (known after apply)
      + idle_timeout                = 60
      + instances                   = (known after apply)
      + internal                    = (known after apply)
      + name                        = "Ethos-project-v1"
      + security_groups             = (known after apply)
      + source_security_group       = (known after apply)
      + source_security_group_id    = (known after apply)
      + subnets                     = (known after apply)
      + tags                        = {
          + "Name" = "Ethos-project-v1"
        }
      + zone_id                     = (known after apply)

      + health_check {
          + healthy_threshold   = 2
          + interval            = 30
          + target              = "HTTP:80/"
          + timeout             = 3
          + unhealthy_threshold = 2
        }

      + listener {
          + instance_port     = 80
          + instance_protocol = "http"
          + lb_port           = 80
          + lb_protocol       = "http"
        }
    }

  # aws_instance.Ethos-project[0] will be created
  + resource "aws_instance" "Ethos-project" {
      + ami                          = "ami-baa236c2"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "Ethos-project-v1"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "data.terraform_remote_state.remote_state.outputs.subnet_ids_frontend[0][count.index]"
      + tags                         = {
          + "InfrastructureVersion" = "1"
          + "Name"                  = "Terraform Blue/Green 1 (v1)"
        }
      + tenancy                      = (known after apply)
      + user_data                    = "a80de1850d6ec15d9d1b213be4cfbdca8e035750"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.Ethos-project[1] will be created
  + resource "aws_instance" "Ethos-project" {
      + ami                          = "ami-baa236c2"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "Ethos-project-v1"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "data.terraform_remote_state.remote_state.outputs.subnet_ids_frontend[0][count.index]"
      + tags                         = {
          + "InfrastructureVersion" = "1"
          + "Name"                  = "Terraform Blue/Green 2 (v1)"
        }
      + tenancy                      = (known after apply)
      + user_data                    = "a80de1850d6ec15d9d1b213be4cfbdca8e035750"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.Ethos-project[2] will be created
  + resource "aws_instance" "Ethos-project" {
      + ami                          = "ami-baa236c2"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "Ethos-project-v1"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = "data.terraform_remote_state.remote_state.outputs.subnet_ids_frontend[0][count.index]"
      + tags                         = {
          + "InfrastructureVersion" = "1"
          + "Name"                  = "Terraform Blue/Green 3 (v1)"
        }
      + tenancy                      = (known after apply)
      + user_data                    = "a80de1850d6ec15d9d1b213be4cfbdca8e035750"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_key_pair.Ethos-project will be created
  + resource "aws_key_pair" "Ethos-project" {
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "Ethos-project-v1"
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEBPAcxa3v9OQbcDwhLGTBtLV30tZYqwDAbqcgQICDXgSyAv6jxHjz/NWOzuwb5BwtolOtdlP92HUzyVGTqqau/y8lA8Qpl4yBnByjjGT3VuQWHpf/CBSnSboiSQ7pv3lUcDqKppNNjEMkgAkipnDolLKVOm0XJNmcfSmRaRSi3PJwhKkqsZdGCjD+zsdJCvIweh/+Oxs9YrNNSbMHyrsbb+cIk07KrhwIaHHJapSk04iOunUHE5CscmUMxVsDSt4j+KhAxBb28it5FTynuNN0hjNJsk3oEK1Yan7A73rOt/3CAWaTTCxD63hO/3u4Cgno81xQZJ4Ki1+ceHvYuoGx jvergara@DESKTOP-6TT1CHF"
    }

  # aws_security_group.Ethos-project will be created
  + resource "aws_security_group" "Ethos-project" {
      + arn                    = (known after apply)
      + description            = "Terraform Blue/Green Ethos"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "Ethos-project-v1"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "Terraform Blue/Green (v1)"
        }
      + vpc_id                 = "vpc-d8d5d2bf"
    }

  # aws_security_group_rule.Ethos-project-inbound will be created
  + resource "aws_security_group_rule" "Ethos-project-inbound" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = -1
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "ingress"
    }

  # aws_security_group_rule.Ethos-project-outbound will be created
  + resource "aws_security_group_rule" "Ethos-project-outbound" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = -1
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # aws_subnet.Ethos-project[0] will be created
  + resource "aws_subnet" "Ethos-project" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "ap-southeast-1a (v1)"
        }
      + vpc_id                          = "vpc-d8d5d2bf"
    }

  # aws_subnet.Ethos-project[1] will be created
  + resource "aws_subnet" "Ethos-project" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.2.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "ap-southeast-1b (v1)"
        }
      + vpc_id                          = "vpc-d8d5d2bf"
    }

  # aws_subnet.Ethos-project[2] will be created
  + resource "aws_subnet" "Ethos-project" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "ap-southeast-1c"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.3.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "ap-southeast-1c (v1)"
        }
      + vpc_id                          = "vpc-d8d5d2bf"
    }

Plan: 11 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.